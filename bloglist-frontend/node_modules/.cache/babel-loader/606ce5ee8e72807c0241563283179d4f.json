{"ast":null,"code":"const notificationReducer = (state = {\n  message: ``,\n  toShow: false,\n  notitype: ''\n}, action) => {\n  switch (action.type) {\n    case 'SUCCESS_NOTIFICATION':\n      return {\n        message: `${action.data.content}`,\n        toShow: true,\n        notitype: true\n      };\n\n    case 'ERROR_NOTIFICATION':\n      return {\n        message: `${action.data.content}`,\n        toShow: true,\n        notitype: false\n      };\n\n    case 'REMOVE_NOTIFICATION':\n      return {\n        message: ``,\n        toShow: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction showNotification(type, content) {\n  return {\n    type: type,\n    data: {\n      content\n    }\n  };\n}\n\nfunction hideNotification() {\n  return {\n    type: 'REMOVE_NOTIFICATION'\n  };\n}\n\nlet nextTimerId = [];\nexport const setSuccessNotification = (content, time) => {\n  return function (dispatch) {\n    dispatch(showNotification('SUCCESS_NOTIFICATION', content));\n    nextTimerId.concat(setTimeout(() => {\n      dispatch(hideNotification());\n    }, time * 1000));\n    console.log(nextTimerId);\n    window.clearTimeout(nextTimerId[-2]);\n  };\n};\nexport const setErrorNotification = (content, time) => {\n  return function (dispatch) {\n    dispatch(showNotification('ERROR_NOTIFICATION', content));\n    nextTimerId.concat(setTimeout(() => {\n      dispatch(hideNotification());\n    }, time * 1000));\n    console.log(nextTimerId);\n    window.clearTimeout(nextTimerId[-2]);\n  };\n};\nexport default notificationReducer;","map":{"version":3,"sources":["/Users/jdszsl/Desktop/Aalto/Aalto-CommunicationsEngineering/CS-E4670FullStackWebDevelopmentD/part7/bloglist/src/reducers/notificationReducer.js"],"names":["notificationReducer","state","message","toShow","notitype","action","type","data","content","showNotification","hideNotification","nextTimerId","setSuccessNotification","time","dispatch","concat","setTimeout","console","log","window","clearTimeout","setErrorNotification"],"mappings":"AAAA,MAAMA,mBAAmB,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,OAAO,EAAG,EAAZ;AAAeC,EAAAA,MAAM,EAAE,KAAvB;AAA8BC,EAAAA,QAAQ,EAAE;AAAxC,CAAT,EAAuDC,MAAvD,KAAkE;AAC1F,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,sBAAL;AACE,aAAO;AAAEJ,QAAAA,OAAO,EAAG,GAAEG,MAAM,CAACE,IAAP,CAAYC,OAAQ,EAAlC;AAAqCL,QAAAA,MAAM,EAAE,IAA7C;AAAoDC,QAAAA,QAAQ,EAAE;AAA9D,OAAP;;AACF,SAAK,oBAAL;AACE,aAAO;AAAEF,QAAAA,OAAO,EAAG,GAAEG,MAAM,CAACE,IAAP,CAAYC,OAAQ,EAAlC;AAAqCL,QAAAA,MAAM,EAAE,IAA7C;AAAmDC,QAAAA,QAAQ,EAAE;AAA7D,OAAP;;AACF,SAAK,qBAAL;AACE,aAAO;AAAEF,QAAAA,OAAO,EAAG,EAAZ;AAAeC,QAAAA,MAAM,EAAE;AAAvB,OAAP;;AACF;AACE,aAAOF,KAAP;AARJ;AAUD,CAXH;;AAcA,SAASQ,gBAAT,CAA0BH,IAA1B,EAAgCE,OAAhC,EAAyC;AACvC,SAAO;AAAEF,IAAAA,IAAI,EAAEA,IAAR;AAAcC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AAApB,GAAP;AACD;;AAED,SAASE,gBAAT,GAA4B;AAC1B,SAAO;AAAEJ,IAAAA,IAAI,EAAE;AAAR,GAAP;AACD;;AAED,IAAIK,WAAW,GAAG,EAAlB;AACA,OAAO,MAAMC,sBAAsB,GAAG,CAACJ,OAAD,EAAUK,IAAV,KAAmB;AACvD,SAAO,UAAUC,QAAV,EAAoB;AAEzBA,IAAAA,QAAQ,CACNL,gBAAgB,CAAC,sBAAD,EAAyBD,OAAzB,CADV,CAAR;AAIFG,IAAAA,WAAW,CAACI,MAAZ,CACEC,UAAU,CAAC,MAAM;AACfF,MAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACD,KAFS,EAEPG,IAAI,GAAG,IAFA,CADZ;AAMEI,IAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AACAQ,IAAAA,MAAM,CAACC,YAAP,CAAoBT,WAAW,CAAC,CAAC,CAAF,CAA/B;AACD,GAdD;AAeD,CAhBM;AAkBP,OAAO,MAAMU,oBAAoB,GAAG,CAACb,OAAD,EAAUK,IAAV,KAAmB;AACrD,SAAO,UAAUC,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CACNL,gBAAgB,CAAC,oBAAD,EAAuBD,OAAvB,CADV,CAAR;AAIAG,IAAAA,WAAW,CAACI,MAAZ,CACEC,UAAU,CAAC,MAAM;AACjBF,MAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACD,KAFW,EAETG,IAAI,GAAG,IAFE,CADZ;AAMAI,IAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AACAQ,IAAAA,MAAM,CAACC,YAAP,CAAoBT,WAAW,CAAC,CAAC,CAAF,CAA/B;AACD,GAbD;AAcD,CAfM;AAiBP,eAAeX,mBAAf","sourcesContent":["const notificationReducer = (state = { message: ``, toShow: false, notitype: '' }, action) => {\n    switch (action.type) {\n      case 'SUCCESS_NOTIFICATION':\n        return { message: `${action.data.content}`, toShow: true,  notitype: true }\n      case 'ERROR_NOTIFICATION':\n        return { message: `${action.data.content}`, toShow: true, notitype: false }\n      case 'REMOVE_NOTIFICATION':\n        return { message: ``, toShow: false }\n      default:\n        return state\n    }\n  }\n\n\nfunction showNotification(type, content) {\n  return { type: type, data: { content } }\n}\n\nfunction hideNotification() {\n  return { type: 'REMOVE_NOTIFICATION' }\n}\n\nlet nextTimerId = []\nexport const setSuccessNotification = (content, time) => {\n  return function (dispatch) {\n    \n    dispatch(\n      showNotification('SUCCESS_NOTIFICATION', content)\n    )\n\n  nextTimerId.concat(\n    setTimeout(() => {\n      dispatch(hideNotification())\n    }, time * 1000)\n  )\n    \n    console.log(nextTimerId)\n    window.clearTimeout(nextTimerId[-2])\n  }\n}\n\nexport const setErrorNotification = (content, time) => {\n  return function (dispatch) {\n    dispatch(\n      showNotification('ERROR_NOTIFICATION', content)\n    )\n\n    nextTimerId.concat(\n      setTimeout(() => {\n      dispatch(hideNotification())\n    }, time * 1000)\n    )\n    \n    console.log(nextTimerId)\n    window.clearTimeout(nextTimerId[-2])\n  }\n}\n\nexport default notificationReducer"]},"metadata":{},"sourceType":"module"}